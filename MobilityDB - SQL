--2.1) For each vehid find the maximum length (in Km) over all its trips. The result should show three columns:  vehid,  time duration of the trip and the trajectory of this trip. 
--Take into consideration that if a vehicle has multiple trips with the same maximum length, it must appear multiple times in the result set (one for each duration time).



WITH aux AS (
SELECT vehid,
	   LENGTH(trip) AS len,
	   MAX(length(trip)) OVER (PARTITION BY vehid) AS max_len,
	   duration(trip) AS duration,
	   trip
FROM trips
)
SELECT vehid,
	   duration,
	   trajectory(trip)
FROM aux
WHERE len = max_len


--2.2) Calculate (dynamically) every adjacent communes from your communes table. Write a SQL query to find trips that cross both adjacent communes. You should only show the tripid and trips restricted by these boundaries and the time when these intersection occurred.  Limit the result to the first 30 tuples,  showing first those with less starting time of the trip

-- Pares de comunas adyacentes:
WITH adjacent_communes AS (
    SELECT c1.communeid AS commune1_id,
           c2.communeid AS commune2_id
    FROM communes c1
    JOIN communes c2 ON c1.communeid <> c2.communeid
    WHERE ST_Touches(c1.geom, c2.geom) AND c1.communeid < c2.communeid
),
-- Agregamos a las comunas adyacentes, sus geometrías, y las
-- geometrías de las uniones:
adjacent_communes_geom AS (
	SELECT ac.*,
		   c1.geom AS geom1,
		   c2.geom AS geom2,
		   ST_Union(c1.geom, c2.geom) AS geom_union
	FROM adjacent_communes ac
	LEFT JOIN communes c1 ON ac.commune1_id = c1.communeid
	LEFT JOIN communes c2 ON ac.commune2_id = c2.communeid
),
-- Restringimos cada viaje solo a los pares de comunas adyacentes.
-- Por ejemplo, si la comuna 1 es adyacente a 2, y 2 es adyacente a 3
-- (pero 1 y 3 no son adyacentes), y el trip1 pasó por las comunas
-- 1, 2 y 3, entonces en una fila aparecerá el trip1 restringido a las
-- comunas 1 y 2, y en otra fila aparecerá restringido a 2 y 3.
-- Si el trip pasa por 1 y 2, sale, y después vuelve a entrar a 1 y/o a 2,
-- entonces aparecerán en la misma fila ambas partes del trip cuando pasó
-- por 1 y/o 2 como dos secuencias distintas.
restricted_trips AS (
	SELECT acg.commune1_id,
		   acg.commune2_id,
		   t.tripid,
		   atGeometry(t.trip, acg.geom_union) AS trip_restricted
	FROM adjacent_communes_geom acg
	CROSS JOIN trips t
	WHERE ST_Intersects(t.trajectory, acg.geom1)
	  AND ST_Intersects(t.trajectory, acg.geom2)
),
-- Calculamos el tiempo mínimo de cada trip dentro de cada par de
-- comunas adyacentes:
restricted_trips_and_times AS (
SELECT tripid,
	   LOWER(trip_restricted::tstzspan) AS tiempo_inicial,
	   trip_restricted
FROM restricted_trips
)
-- Ordenamos por el tiempo que calculamos en la CTE anterior y
-- restringimos el resultado a las primeras 30 tuplas:
SELECT tripid,
	   trip_restricted
FROM restricted_trips_and_times
ORDER BY tiempo_inicial ASC
LIMIT 30


